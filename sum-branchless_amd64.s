//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000000000001
GLOBL LCDATA1<>(SB), 8, $8

TEXT Â·_sum_branchless(SB), $0-24

    MOVQ arrayPtr+0(FP), DI
    MOVQ arrayLen+8(FP), SI
    MOVQ sum+16(FP), DX
    LEAQ LCDATA1<>(SB), BP

    WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JLE LBB0_1
    LONG $0x0ffe8348             // cmp    rsi, 15
	JA LBB0_4
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
	JMP LBB0_11
LBB0_1:
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB0_12
LBB0_4:
    WORD $0x8949; BYTE $0xf2     // mov    r10, rsi
    LONG $0xf0e28349             // and    r10, -16
    LONG $0xf04a8d49             // lea    rcx, [r10 - 16]
    WORD $0x8949; BYTE $0xc8     // mov    r8, rcx
    LONG $0x04e8c149             // shr    r8, 4
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE LBB0_5
    WORD $0x894d; BYTE $0xc1     // mov    r9, r8
    LONG $0xfee18349             // and    r9, -2
    WORD $0xf749; BYTE $0xd9     // neg    r9
    LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
    WORD $0xc931                 // xor    ecx, ecx
    LONG $0x597de2c4; WORD $0x0065 // vpbroadcastq    ymm4, qword 0[rbp] /* [rip + .LCPI0_0] */
    LONG $0xed76d5c5             // vpcmpeqd    ymm5, ymm5, ymm5
    LONG $0xc9eff1c5             // vpxor    xmm1, xmm1, xmm1
    LONG $0xd2efe9c5             // vpxor    xmm2, xmm2, xmm2
    LONG $0xdbefe1c5             // vpxor    xmm3, xmm3, xmm3
LBB0_7:
    LONG $0x346ffec5; BYTE $0xcf // vmovdqu    ymm6, yword [rdi + 8*rcx]
    LONG $0x7c6ffec5; WORD $0x20cf // vmovdqu    ymm7, yword [rdi + 8*rcx + 32]
    LONG $0x446f7ec5; WORD $0x40cf // vmovdqu    ymm8, yword [rdi + 8*rcx + 64]
    LONG $0x4c6f7ec5; WORD $0x60cf // vmovdqu    ymm9, yword [rdi + 8*rcx + 96]
    LONG $0xd4db4dc5             // vpand    ymm10, ymm6, ymm4
    LONG $0xdcdb45c5             // vpand    ymm11, ymm7, ymm4
    LONG $0xe4db3dc5             // vpand    ymm12, ymm8, ymm4
    LONG $0xecdb35c5             // vpand    ymm13, ymm9, ymm4
    LONG $0xd5d42dc5             // vpaddq    ymm10, ymm10, ymm5
    LONG $0xddd425c5             // vpaddq    ymm11, ymm11, ymm5
    LONG $0xe5d41dc5             // vpaddq    ymm12, ymm12, ymm5
    LONG $0xedd415c5             // vpaddq    ymm13, ymm13, ymm5
    LONG $0xf6dbadc5             // vpand    ymm6, ymm10, ymm6
    LONG $0xc0d4cdc5             // vpaddq    ymm0, ymm6, ymm0
    LONG $0xf7dba5c5             // vpand    ymm6, ymm11, ymm7
    LONG $0xc9d4cdc5             // vpaddq    ymm1, ymm6, ymm1
    LONG $0xdb1dc1c4; BYTE $0xf0 // vpand    ymm6, ymm12, ymm8
    LONG $0xd2d4cdc5             // vpaddq    ymm2, ymm6, ymm2
    LONG $0xdb15c1c4; BYTE $0xf1 // vpand    ymm6, ymm13, ymm9
    LONG $0xdbd4cdc5             // vpaddq    ymm3, ymm6, ymm3
    QUAD $0x000080cfb46ffec5; BYTE $0x00 // vmovdqu    ymm6, yword [rdi + 8*rcx + 128]
    QUAD $0x0000a0cfbc6ffec5; BYTE $0x00 // vmovdqu    ymm7, yword [rdi + 8*rcx + 160]
    QUAD $0x0000c0cf846f7ec5; BYTE $0x00 // vmovdqu    ymm8, yword [rdi + 8*rcx + 192]
    QUAD $0x0000e0cf8c6f7ec5; BYTE $0x00 // vmovdqu    ymm9, yword [rdi + 8*rcx + 224]
    LONG $0xd4db4dc5             // vpand    ymm10, ymm6, ymm4
    LONG $0xdcdb45c5             // vpand    ymm11, ymm7, ymm4
    LONG $0xe4db3dc5             // vpand    ymm12, ymm8, ymm4
    LONG $0xecdb35c5             // vpand    ymm13, ymm9, ymm4
    LONG $0xd5d42dc5             // vpaddq    ymm10, ymm10, ymm5
    LONG $0xddd425c5             // vpaddq    ymm11, ymm11, ymm5
    LONG $0xe5d41dc5             // vpaddq    ymm12, ymm12, ymm5
    LONG $0xedd415c5             // vpaddq    ymm13, ymm13, ymm5
    LONG $0xf6dbadc5             // vpand    ymm6, ymm10, ymm6
    LONG $0xc0d4cdc5             // vpaddq    ymm0, ymm6, ymm0
    LONG $0xf7dba5c5             // vpand    ymm6, ymm11, ymm7
    LONG $0xc9d4cdc5             // vpaddq    ymm1, ymm6, ymm1
    LONG $0xdb1dc1c4; BYTE $0xf0 // vpand    ymm6, ymm12, ymm8
    LONG $0xd2d4cdc5             // vpaddq    ymm2, ymm6, ymm2
    LONG $0xdb15c1c4; BYTE $0xf1 // vpand    ymm6, ymm13, ymm9
    LONG $0xdbd4cdc5             // vpaddq    ymm3, ymm6, ymm3
    LONG $0x20c18348             // add    rcx, 32
    LONG $0x02c18349             // add    r9, 2
	JNE LBB0_7
    LONG $0x01c0f641             // test    r8b, 1
	JE LBB0_10
LBB0_9:
    LONG $0x246ffec5; BYTE $0xcf // vmovdqu    ymm4, yword [rdi + 8*rcx]
    LONG $0x6c6ffec5; WORD $0x20cf // vmovdqu    ymm5, yword [rdi + 8*rcx + 32]
    LONG $0x746ffec5; WORD $0x40cf // vmovdqu    ymm6, yword [rdi + 8*rcx + 64]
    LONG $0x7c6ffec5; WORD $0x60cf // vmovdqu    ymm7, yword [rdi + 8*rcx + 96]
    LONG $0x597d62c4; WORD $0x0045 // vpbroadcastq    ymm8, qword 0[rbp] /* [rip + .LCPI0_0] */
    LONG $0xcfdb3dc5             // vpand    ymm9, ymm8, ymm7
    LONG $0x762d41c4; BYTE $0xd2 // vpcmpeqd    ymm10, ymm10, ymm10
    LONG $0xd43541c4; BYTE $0xca // vpaddq    ymm9, ymm9, ymm10
    LONG $0xffdbb5c5             // vpand    ymm7, ymm9, ymm7
    LONG $0xdbd4c5c5             // vpaddq    ymm3, ymm7, ymm3
    LONG $0xfedbbdc5             // vpand    ymm7, ymm8, ymm6
    LONG $0xffd4adc5             // vpaddq    ymm7, ymm10, ymm7
    LONG $0xf6dbc5c5             // vpand    ymm6, ymm7, ymm6
    LONG $0xd2d4cdc5             // vpaddq    ymm2, ymm6, ymm2
    LONG $0xf5dbbdc5             // vpand    ymm6, ymm8, ymm5
    LONG $0xf6d4adc5             // vpaddq    ymm6, ymm10, ymm6
    LONG $0xeddbcdc5             // vpand    ymm5, ymm6, ymm5
    LONG $0xc9d4d5c5             // vpaddq    ymm1, ymm5, ymm1
    LONG $0xecdbbdc5             // vpand    ymm5, ymm8, ymm4
    LONG $0xedd4adc5             // vpaddq    ymm5, ymm10, ymm5
    LONG $0xe4dbd5c5             // vpand    ymm4, ymm5, ymm4
    LONG $0xc0d4ddc5             // vpaddq    ymm0, ymm4, ymm0
LBB0_10:
    LONG $0xcbd4f5c5             // vpaddq    ymm1, ymm1, ymm3
    LONG $0xc2d4fdc5             // vpaddq    ymm0, ymm0, ymm2
    LONG $0xc1d4fdc5             // vpaddq    ymm0, ymm0, ymm1
    LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
    LONG $0xc1d4f9c5             // vpaddq    xmm0, xmm0, xmm1
    LONG $0xc870f9c5; BYTE $0x4e // vpshufd    xmm1, xmm0, 78
    LONG $0xc1d4f9c5             // vpaddq    xmm0, xmm0, xmm1
    LONG $0x7ef9c1c4; BYTE $0xc0 // vmovq    r8, xmm0
    WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JE LBB0_12
LBB0_11:
    LONG $0xd70c8b4a             // mov    rcx, qword [rdi + 8*r10]
    WORD $0xc889                 // mov    eax, ecx
    WORD $0xe083; BYTE $0x01     // and    eax, 1
    WORD $0xff48; BYTE $0xc8     // dec    rax
    WORD $0x2148; BYTE $0xc8     // and    rax, rcx
    WORD $0x0149; BYTE $0xc0     // add    r8, rax
    WORD $0xff49; BYTE $0xc2     // inc    r10
    WORD $0x394c; BYTE $0xd6     // cmp    rsi, r10
	JNE LBB0_11
LBB0_12:
    WORD $0x894c; BYTE $0x02     // mov    qword [rdx], r8
    VZEROUPPER
    RET
LBB0_5:
    LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
    WORD $0xc931                 // xor    ecx, ecx
    LONG $0xc9eff1c5             // vpxor    xmm1, xmm1, xmm1
    LONG $0xd2efe9c5             // vpxor    xmm2, xmm2, xmm2
    LONG $0xdbefe1c5             // vpxor    xmm3, xmm3, xmm3
    LONG $0x01c0f641             // test    r8b, 1
	JNE LBB0_9
	JMP LBB0_10
